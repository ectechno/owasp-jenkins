using System;

using System.Net;
using Newtonsoft.Json;
using ZAPPenTester.Interfaces;

namespace ZAPPenTester
{
	/// <summary>
	/// This class is responsible for interfacing the ZAP spider funcionality like starting the spider and checking the status of the spider.
	/// The spider is the part of ZAP that, given a URL, crawls the url and all pages linked to it, and their children, and their children, ...
	/// </summary>
	public class Spider : ISpider
	{
		private const string spiderComplete = "100";
		private const string spiderStarted = "OK";
		private const string includeDone = "OK";

		private readonly ISettings settings;
		private readonly ILogger logger;
		private readonly IHttpClientHelper httpClientHelper;

		public Spider(ISettings settings, ILogger logger, IHttpClientHelper httpClientHelper)
		{
			this.settings = settings;
			this.logger = logger;
			this.httpClientHelper = httpClientHelper;
		}

		public bool Start(string url, string loginUrl, string uName, string pwd)
		{
			int userID = 999;
			int count = 0;
			string EncodedURL = WebUtility.UrlEncode(url);

			string EncodedloginURL = WebUtility.UrlEncode(loginUrl);
			string EEncodedloginURL = WebUtility.UrlEncode(EncodedloginURL); ;

			//Console.WriteLine(EncodedURL);
			logger.Log(String.Format("Starting spider for {0}", url));

			//string response = httpClientHelper.MakeHttpRequest(settings.ZapSpiderUrl.Replace("##", url), HttpResponseType.json);

			//Include in Context
			string regexUrl = "\\Q" + url + "\\E.*";
			string EncodedRegex = WebUtility.UrlEncode(regexUrl);
			string regexInclude = settings.IncludeContext.Replace("!!", regexUrl);
			string include = httpClientHelper.MakeHttpRequest(regexInclude, HttpResponseType.json);  //these were modified by janitha
			if (include != null)
			{
				dynamic jsonResponse = JsonConvert.DeserializeObject(include);
				logger.Log("Context added");
			}

			//Get Current Contexts
			//string context = "http://zap/JSON/context/view/includeRegexs/?zapapiformat=JSON&contextName=1";
			//string contextList = httpClientHelper.MakeHttpRequest(context, HttpResponseType.json);
			//dynamic jsonResponseC = JsonConvert.DeserializeObject(contextList);

			//string a = (string) jsonResponseC.includeRegexs;

			//if (!(a.Contains(regexUrl)))
			//{
			//	string EncodedRegex = WebUtility.UrlEncode(regexUrl);
			//	string regexInclude = settings.IncludeContext.Replace("!!", regexUrl);
			//	string include = httpClientHelper.MakeHttpRequest(regexInclude, HttpResponseType.json);  //these were modified by janitha
			//	if (include != null)
			//	{
			//		dynamic jsonResponse = JsonConvert.DeserializeObject(include);
			//		logger.Log("Context added");
			//	}
			//}

			string orgauth = "http://zap/JSON/authentication/action/setAuthenticationMethod/?zapapiformat=JSON&contextId=1&authMethodName=formBasedAuthentication&authMethodConfigParams=loginUrl%3D!!%26loginRequestData%3Dusername%253D%257B%2525username%2525%257D%2526password%253D%257B%2525password%2525%257D%2526rememberMe%253Dtrue";
			string auth = orgauth.Replace("!!", EEncodedloginURL);
			string authenticate = httpClientHelper.MakeHttpRequest(auth, HttpResponseType.json);
			if (authenticate != null)
			{
				dynamic jsonResponse = JsonConvert.DeserializeObject(authenticate);
				logger.Log("Authentication added");
			}

			//LoginIndicator
			string loginIndicator = httpClientHelper.MakeHttpRequest(settings.LoginIndicator, HttpResponseType.json);
			if (loginIndicator != null)
			{
				dynamic jsonResponse = JsonConvert.DeserializeObject(loginIndicator);
				logger.Log("LoginIndicator added");
			}

			string users = "http://zap/JSON/users/view/usersList/?zapapiformat=JSON&contextId=1";
			string userList = httpClientHelper.MakeHttpRequest(users, HttpResponseType.json);
			dynamic jsonResponseU = JsonConvert.DeserializeObject(userList);
			foreach (var user in jsonResponseU.usersList)
			{
				//Console.WriteLine(user.credentials["username"]);
				if (user.credentials.username == uName)
				{
					userID = user.id;
					Console.WriteLine("Came!!!!!!");
					break;
				}
				count++;
			}
			if (userID == 999)
			{
				//Add New User
				string NewUser = httpClientHelper.MakeHttpRequest(settings.NewUser, HttpResponseType.json);
				if (NewUser != null)
				{
					dynamic jsonResponse = JsonConvert.DeserializeObject(NewUser);
					logger.Log("User 99x created");
				}

				//Add User Credentials
				string tmpU = settings.UserCredential.Replace("##", uName);
				string tmpUU = tmpU.Replace("!!", pwd);
				string tmpUUU = tmpUU.Replace("$$", count.ToString());
				string UserCredential = httpClientHelper.MakeHttpRequest(tmpUUU, HttpResponseType.json);
				if (NewUser != null)
				{
					dynamic jsonResponse = JsonConvert.DeserializeObject(UserCredential);
					logger.Log("User Credentials added");
				}

				//Enable User
				string EnableU = settings.EnableUser.Replace("##", count.ToString());
				string EnableUser = httpClientHelper.MakeHttpRequest(EnableU, HttpResponseType.json);
				if (EnableUser != null)
				{
					dynamic jsonResponse = JsonConvert.DeserializeObject(EnableUser);
					logger.Log("User Enabled");
				}

				userID = count;
			}

			Console.WriteLine("userID is " + userID);
			//Spider Using User
			string spiderU = settings.SpiderUserURL.Replace("##", userID.ToString());
			string spiderUU = spiderU.Replace("!!", EncodedURL);
			//string spiderUU = "http://zap/JSON/spider/action/scanAsUser/?zapapiformat=JSON&url=http%3A%2F%2F99x.test.fdvu.net%2F&contextId=1&userId=0";
			string Sresponse = httpClientHelper.MakeHttpRequest(spiderUU, HttpResponseType.json);

			if (Sresponse != null)
			{
				dynamic jsonResponse = JsonConvert.DeserializeObject(Sresponse);
				while (jsonResponse.Result != null)
					return jsonResponse.Result.ToString().ToUpper() == spiderStarted;
			}

			return false;
		}

		public bool HasCompleted()
		{
			string response = httpClientHelper.MakeHttpRequest(settings.ZapSpiderStatusUrl, HttpResponseType.json);
			string spiderURls = httpClientHelper.MakeHttpRequest(settings.SpiderURL, HttpResponseType.json);
			if (response != null)
			{
				dynamic jsonResponse = JsonConvert.DeserializeObject(response);
				dynamic jsonResponse2 = JsonConvert.DeserializeObject(spiderURls);
				logger.Log(String.Format("Spider progress: {0}%", jsonResponse.status.ToString()));

				if (jsonResponse.status.ToString() == spiderComplete)
				{
					logger.Log(String.Format(jsonResponse2.results.ToString()));
				}
				return jsonResponse.status.ToString() == spiderComplete;
			}

			return false;
		}
	}
}