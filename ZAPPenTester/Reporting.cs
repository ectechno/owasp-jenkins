using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Mail;
using System.Text;
using System.Windows;
using System.Windows.Forms;
using System.Xml;
using System.Xml.Linq;
using ZAPPenTester.Interfaces;
using ZAPPenTester.Models;

namespace ZAPPenTester
{
	/// <summary>
	/// This class is responsible for reading the findings of a ZAP scan and converting them to a known format.
	/// </summary>
	public class Reporting : IReporting
	{
		private readonly ISettings settings;
		private readonly ILogger logger;
		private readonly IHttpClientHelper httpClientHelper;
		private StreamReader reader;

		private string high = "High (Warning)";
		private string medium = "Medium (Warning)";
		private string low = "Low (Warning)";
		private string informational = "Informational (Warning)";
		private string body = "";
		private string line;

		public Reporting(ISettings settings, ILogger logger, IHttpClientHelper httpClientHelper)
		{
			this.settings = settings;
			this.logger = logger;
			this.httpClientHelper = httpClientHelper;
		}

		public Report GetReport(string url, string emails)
		{
			logger.Log("Preparing report");

			string response = httpClientHelper.MakeHttpRequest(settings.ZapReportUrl, HttpResponseType.xml);

			if (response != null)
			{
				XDocument document = XDocument.Parse(response);

				document.Save("../Report.xml");
				Console.WriteLine("Report Saved in XML format");

				IEnumerable<XElement> elements = document.Element("OWASPZAPReport").Elements("site").Where(e => e.Attribute("host").Value == new Uri(url).Host);

				var issues = new List<Issue>();
				foreach (XElement element in elements)
				{
					issues.AddRange(
						 from e in element.Descendants("alertitem")
						 select new Issue
						 {
							 IssueDescription = e.Element("alert").Value,
							 RiskDescription = e.Element("riskdesc").Value,
							 TargetUrl = e.Element("uri").Value,
							 OriginalSiteUrl = element.Attribute("name").Value
						 });
				}
				string htmlReport = "http://zap/HTML/core/view/alerts/?zapapiformat=HTML";
				string response1 = httpClientHelper.MakeHttpRequest(htmlReport, HttpResponseType.html);

				foreach (XElement element in document.Descendants("alertitem"))
				{
					foreach (XElement childEllement in element.Descendants("riskdesc"))
					{
						if (high.Equals(childEllement.Value) || medium.Equals(childEllement.Value))
						{
							body = body + "<table border='1' style='solid black;'>" +
							"<tr><td>Alert</td><td>" + element.Element("alert").Value + "</td></tr>" +
							"<tr><td>Risk</td><td>" + element.Element("riskdesc").Value + "</td></tr>" +
								//"<tr><td>Description</td><td>" + element.Element("desc").Value + "</td></tr>" +
							"<tr><td>URL</td><td>" + element.Element("uri").Value + "</td></tr>" +
								"<tr><td>Parameter</td><td>" + element.Element("param").Value + "</td></tr>" +
							"<tr><td>Attack</td><td>" + element.Element("attack").Value + "</td></tr>" +
								//"<tr><td>Other</td><td>" + element.Element("otherinfo").Value + "</td></tr>" +
								//"<tr><td>Evidence</td><td>" + element.Element("evidence").Value + "</td></tr>" +
							"<tr><td>Solution</td><td>" + element.Element("solution").Value + "</td></tr></table><br>";
						}
					}
				}

				string[] emailList = emails.Split(';');

				try
				{
					MailMessage mail = new MailMessage();
					SmtpClient smtpServer = new SmtpClient("localhost");

					foreach (string email in emailList)
					{
						mail.To.Add(email);
					}

					mail.From = new MailAddress("no-reply@fdvu.net");

					mail.Subject = "Security Testing Results";
					mail.IsBodyHtml = true;
					mail.Body = body;

					smtpServer.Credentials = new System.Net.NetworkCredential("", "");
					smtpServer.EnableSsl = false;

					smtpServer.Send(mail);
					Console.WriteLine("Mail Sent");
				}
				catch (Exception ex)
				{
					Console.WriteLine(ex.ToString());
				}

				//string response2 = httpClientHelper.MakeHttpRequest("http://zap/JSON/core/action/shutdown/?zapapiformat=JSON", HttpResponseType.json);

				return new Report { Issues = issues };
			}

			return null;
		}
	}
}
